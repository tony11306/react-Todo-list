{"version":3,"sources":["components/AddTaskForm.js","components/Task.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["AddTaskForm","onAddingTask","useState","taskNameInput","setTaskNameInput","className","onSubmit","e","preventDefault","id","type","value","placeholder","onChange","target","onClick","length","Task","taskName","taskId","onDeleteTask","isFinished","setIsFinished","TodoList","props","tasks","setTasks","ids","setIds","handleDeletingTask","newTasks","filter","task","currentTasks","push","map","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOA4BeA,MA1Bf,YAAwC,IAAjBC,EAAgB,EAAhBA,aAEnB,EAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAWA,OACI,qBAAKC,UAAU,gBAAf,SACI,sBAAMC,SAAW,SAAAC,GAAOA,EAAEC,kBAA1B,SACA,sBAAKH,UAAU,mBAAf,UACI,sBAAMA,UAAU,mBAAmBI,GAAG,4BAAtC,yBACA,uBAAOC,KAAK,OAAOL,UAAU,eAAe,aAAW,uBAAuB,mBAAiB,4BAA4BM,MAAQR,EAAgBS,YAAY,cAAcC,SAAW,SAACN,GAAD,OAAOH,EAAiBG,EAAEO,OAAOH,UACzN,wBAAQN,UAAU,kBAAkBK,KAAK,SAASK,QAfhC,WAEE,IAAzBZ,EAAca,SAGjBf,EAAaE,GACbC,EAAiB,MAST,4BCODa,MA1Bf,YAAmD,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,aAE9B,EAAoClB,oBAAS,GAA7C,mBAAOmB,EAAP,KAAmBC,EAAnB,KAMA,OACI,qBAAKjB,UAAU,YAAaU,QAAS,WAJrCO,GAAeD,IAIf,SACI,qBAAKhB,UAAU,OAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAW,UAAYgB,EAAa,iBAAmB,IAA5D,SACKH,IAEL,qBAAKb,UAAU,QAAf,SACI,wBAAQK,KAAK,SAASL,UAAU,YAAY,aAAW,QAAQU,QAAS,kBAAMK,EAAaD,kBCkCxGI,MAjDf,SAAkBC,GAEd,MAA0BtB,mBAAS,IAAnC,mBAAOuB,EAAP,KAAcC,EAAd,KACA,EAAsBxB,mBAAS,GAA/B,mBAAOyB,EAAP,KAAYC,EAAZ,KAeMC,EAAqB,SAACV,GACxB,IAAIW,EAAWL,EAAMM,QAAO,SAAAC,GAAI,OAAIA,EAAI,KAAWb,KACnDO,EAASI,IAGb,OACI,qBAAKzB,UAAU,YAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,MAAf,SACI,oBAAIA,UAAU,cAAd,2BAEJ,sBAAKA,UAAU,MAAf,UACI,cAAC,EAAD,CAAaJ,aA1BJ,SAACiB,GACtB,IAAIe,EAAY,YAAOR,GACvBQ,EAAaC,KAAK,CACdhB,SAAUA,EACVT,GAAIkB,IAERC,EAAOD,EAAM,GACbD,EAASO,MAoBG,qBAAK5B,UAAU,eAAf,SACI,wBAAQA,UAAU,kBAAkBK,KAAK,SAASK,QAlBhD,WAClBW,EAAS,KAiBO,4BAGR,qBAAKrB,UAAU,MAAf,SACI,sBAAKA,UAAU,QAAf,UACI,qBAAIA,UAAU,cAAd,sBAAuD,IAAjBoB,EAAMT,OAAeS,EAAMT,OAAS,KAA1E,aAEIS,EAAMU,KAAI,SAACH,EAAMI,GAAY,OAAO,cAAC,EAAD,CAAkBlB,SAAUc,EAAI,SAAcb,OAAQa,EAAI,GAAQZ,aAAcS,GAArEO,iBChC5DC,MARf,WACI,OACI,qBAAKhC,UAAU,MAAf,SACI,cAAC,EAAD,OCMGiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.96d6eba8.chunk.js","sourcesContent":["import { useState } from \"react\"\r\n\r\nfunction AddTaskForm({ onAddingTask }) {\r\n\r\n    const [taskNameInput, setTaskNameInput] = useState(\"\")\r\n\r\n    const onCreateButtonPressed = () => {\r\n\r\n        if(taskNameInput.length === 0) {\r\n            return\r\n        }\r\n        onAddingTask(taskNameInput)\r\n        setTaskNameInput(\"\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-task-form\">\r\n            <form onSubmit={ e => { e.preventDefault() } }>\r\n            <div className=\"input-group mb-3\">\r\n                <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Task to add</span>\r\n                <input type=\"text\" className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" value={ taskNameInput } placeholder=\"Cook dinner\" onChange={ (e) => setTaskNameInput(e.target.value) }/>\r\n                <button className=\"btn btn-primary\" type=\"submit\" onClick={ onCreateButtonPressed }>Create</button>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTaskForm","import { useState } from \"react\"\r\n\r\nfunction Task({ taskName, taskId, onDeleteTask }) {\r\n\r\n    const [isFinished, setIsFinished] = useState(false)\r\n\r\n    const switchIsFinished = () => {\r\n        setIsFinished(!isFinished)\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-item\"  onClick={() => switchIsFinished()}>\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <div className=\"row\">\r\n                        <div className={\"col-11\" + (isFinished ? \" task-finished\" : \"\")}>\r\n                            {taskName}\r\n                        </div>\r\n                        <div className=\"col-1\">\r\n                            <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={() => onDeleteTask(taskId)}></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task","import { useState } from \"react\"\r\nimport AddTaskForm from \"./AddTaskForm\"\r\nimport Task from \"./Task\"\r\n\r\nfunction TodoList(props) {\r\n\r\n    const [tasks, setTasks] = useState([])\r\n    const [ids, setIds] = useState(0)\r\n    const handleAddingTask = (taskName) => {\r\n        let currentTasks = [...tasks]\r\n        currentTasks.push({\r\n            taskName: taskName,\r\n            id: ids\r\n        })\r\n        setIds(ids + 1)\r\n        setTasks(currentTasks)\r\n    }\r\n\r\n    const clearAllTasks = () => {\r\n        setTasks([])\r\n    }\r\n\r\n    const handleDeletingTask = (taskId) => {\r\n        let newTasks = tasks.filter(task => task['id'] !== taskId)\r\n        setTasks(newTasks)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"todo-list\">\r\n                <div className=\"row\">\r\n                    <h2 className=\"text-center\"> Todo List </h2>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <AddTaskForm onAddingTask={handleAddingTask} />\r\n                    <div className=\"d-grid gap-2\">\r\n                        <button className=\"btn btn-primary\" type=\"button\" onClick={clearAllTasks}>Clear all</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"tasks\">\r\n                        <h5 className=\"text-center\">You have {tasks.length !== 0 ? tasks.length : \"no\"} tasks.</h5>\r\n                        {\r\n                            tasks.map((task, index) => { return <Task key={index} taskName={task[\"taskName\"]} taskId={task[\"id\"]} onDeleteTask={handleDeletingTask} /> })\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TodoList />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}